
---
layout: post
title: Patrón PageObject (Selenium)
tags: java selenium patterns
eye_catch: ""
---

El patrón Page Object se ha puesto muy de moda en el mundo de las pruebas funcionales debido a que nos ayuda a 
tener un código más limpio, una mejor estructura de proyecto y en definitiva un código más mantenible.

Se basa sencillamente en separar toda la implementación de la aplicación de lo que es su funcionamiento. 
De esta forma nos centramos en probar nuestra web página a página, como si un usuario navegara a través de ella
y teniendo en cuenta que cada página para nosotros será un objeto. Así sólo nos quedará interactuar con cada uno 
de ellos y devolver un objeto (página) inmediatamente posterior para poder encadenar caminos funcionales.

Para tener una imagen clara de esto, imaginemos una aplicación con distintas páginas o elementos como la siguiente:
1) Vista de la página de Registro
2) Vista de la página de Login
3) Página de Gestión de usuarios
4) Página de Gestión de notas
5) Logout (en la misma vista que las páginas de gestión)


Y en cada página tendremos agrupado todo el comportamiento de la misma, es decir:
* para 1 tendremos todos los métodos para probar que un registro se ha llevado a cabo (registro ok, registro no_ok y comprobaciones de iterfaz)
* para 2 tendremos todos los métodos para probar que un login se ha llevado a cabo (login ok, login no_ok y comprobaciones de iterfaz)
* para 3 tendremos los que permiten gestionar usuarios (como agregar usuario, eliminar usuario, buscar usuario por nombre, buscar usuario por email y editar usuario).
así sucesivamente...

y sólo quedaría unir estos métodos entre ellos en caminos de forma fácil como:

registro ok > login ok > agregar usuario > buscar usuario > cerrar sesión

Así cada página permite que sus métodos enlacen con los métodos de otras páginas.

Este patrón está muy relacionado con otro llamado PageFactory a nivel de código.
En un nuevo post explicaré este otro ;)

¡Saludos!
